<div id="logbox">

	<div class="log-entry">
		<div class="log-date">
			February 3rd 2013
		</div>
		<div class="log-description">
			There's no better time to ship features than Saturday night right? I finally implemented favouriting (Shortlist's API naturally follows Canadian spelling conventions eh!) tonight. Check out that little favourites icon in the bottom right hand corner of each Short. 
			<br/><br/>
			My initial implementation used an \<img\> tag with a (25px x 25px) icon embedded in a link tag that when clicked triggered a POST to the server. Functionally it worked great but I was unhappy with how the favourite icons looked as they seemed desaturated and blurry. After some research into best practices for icons I switched to using Retina (ie. images 2x their normal resolution) and CSS image sprites. The premise of CSS image sprites being that that instead of having multiple images in separate \<img\> tags you have one image that contains all the image assets. This limits the number of HTTP requests the client has to make — which turns out to take a a good percentage of the total time needed to render a page. After pushing the sprites to production I'm much happier with how they render. As I continue to add more features it becomes harder and harder to maintain a simple interface — one of my goals with Shortlist.
			<br/><br/>
			“A modern paradox is that it’s simpler to create complex interfaces because it’s so complex to simplify them.” — Pär Almqvist
		</div>
	</div>

	<div class="log-entry">
		<div class="log-date">
			February 25nd 2013
		</div>
		<div class="log-description">
			Imagine for a moment trying to assemble a bike with your eyes closed. And you can only open your eyes once you believe you've properly assembled the bike. Tough right? 
			<br/><br/>
			There's been a few times during this project that I've felt like I've fallen into this rut. I've been working on a problem or a new feature and it gets to the point where I think it would be easier to just throw out the recent changes and take a different tack. A pattern I've now noticed. The root cause is often with the looseness of the project's feedback loops. That is, a project's progress is a function of the its feedback loops. 
			<br/><br/>
			Be it the JavaScript library that refreshes your CSS changes automatically or the script that you wrote to automate deployment, the shorter you can make that feedback loop, the quicker you can iterate. If the feedback loop is too long we can't gauge progress and miss out on the gratification of incremental progress. Take the time to adopt (or build!) tools that make feedback near instantaneous. Compartmentalize problems. Just like you don't run a marathon on day one of training, progress is incremental. Finding joy in these little incremental improvements is really half the journey.
		</div>
	</div>

	<div class="log-entry">
		<div class="log-date">
			February 24nd 2013
		</div>
		<div class="log-description">
			Sunday's focus was on implementing profile photo uploads when a user signs up. There are about a million and one ways to do this but after surveying a few options I went with client-side uploads to AWS S3. This obviates the need for the file data to actually pass through the server and instead is sent straight to S3. How this works: once a file is selected by the user the client then asks the server for one-time upload permissions to S3. This is now all possible thanks to Amazon recently opening up CORS (Cross Origin Resource Sharing). If permission is granted by the server the upload is made and the file URL is returned to the client. I'm pretty happy with how it turned out. 
			<br/><br/>
			Oddly enough, the most challenging aspect to all of this was styling the file input box. For all the advancement we've had with web technologies in recent years we're still stuck with really mediocre 'hacks' for styling input boxes. After a perusal of StackOverflow responses to this issue essentially the solution (if you can call it that!) boils down to overlaying the actual input box over a button. Setting the opacity of the input box to zero which gives the illusion that you're actually clicking on a button but instead clicking on the "Browse for file..." button. I'm not happy with that aspect of the implementation but it's good enough for now. Ah the plight of the perfectionist. Anyways, done is better perfect...right?
		</div>
	</div>

	<div class="log-entry">
		<div class="log-date">
			February 22nd 2013
		</div>
		<div class="log-description">
			Did a bunch of UI clean-up on the input boxes and buttons. It's getting better but is still going to require some tinkering.
		</div>
	</div>

	<div class="log-entry">
		<div class="log-date">
			February 21st 2013
		</div>
		<div class="log-description">
			Implemented a feature that pops-up a users avatar as they login with their username. Initially I wrote an API that was pinged every keystroke but I quickly realized that this was much more expensive than was actually needed. Instead, on loading '/login' a request is made for a JSON document that contains all usernames and their associated avatar URLs. Then as a user types I check against that list. One server hit instead number of keystrokes. Much more efficient. 
		</div>
	</div>

	<div class="log-entry">
		<div class="log-date">
			February 20th 2013
		</div>
		<div class="log-description">
			Today was all about integrating new source type support for inline display. After some deliberation I switched from the Flash based YouTube player to the HTML5 embeddable version. While the HTML5 version is widely used I find the it to be much snappier and feels lighter-weight but I haven't yet instrumented the difference between the two players. It also scales nicer when changing the width of the DOM. I also added support for Vimeo and Soundcloud links today which I'm pretty stoked about.
		</div>
	</div>

	<div class="log-entry">
		<div class="log-date">
			February 19th 2013
		</div>
		<div class="log-description">
			Added the ability for users to both edit and delete Shorts they've posted.
		</div>
	</div>

	<div class="log-entry">
		<div class="log-date">
			February 18th 2013
		</div>
		<div class="log-description">
			Implemented a navbar that displays the users avatar when signed in. Happy with how clean I've managed to keep it.
		</div>
	</div>

	<div class="log-entry">
		<div class="log-date">
			February 14th 2013
		</div>
		<div class="log-description">
			Well look at that — you can now authenticate as a user! Fortunately DataMapper has a nice little BCrypt property that when working in tandem with Warden (auth gem) you end up with a pretty simple way to handle authentication and passwords. Integrating this with Sinatra was easier than I thought it would be and things seem to be pretty stable. Also added NewRelic support today for availability monitoring. Since I'm hosting on the free Heroku tier at the moment, typically applications 'sleep' after 5 minutes of inactivity. To avoid this, I've set NewRelic up to ping the site for "availability monitoring" every 30 seconds which should negate the 5 second or so "wake-up" time that is typically incurred after the app goes to sleep. It's quite hacky but it solves the problem at least until I need to worry more about scaling.
		</div>
	</div>

	<div class="log-entry">
		<div class="log-date">
			February 12th 2013
		</div>
		<div class="log-description">
			Switched to using GitHub issues for tracking project progress and features/milestones and I have to say I'm really enjoying it. I've started to organize features into weekly sprint milestones which I find helps keep me motivated and at the same time quantitatively instrument progress.
		</div>
	</div>

	<div class="log-entry">
		<div class="log-date">
			January 31st 2013
		</div>
		<div class="log-description">
			I often wonder when something you're building goes from being a mis-mash of code that sort of works to something that looks enjoyable to use. I think today was that day. Working through the user profiles I'm really happy with how they look. It's simple with a big focus on the content. As of now it doesn't show link based on date but rather the three most recently submitted links. I need to figure out a way to deal with the three links a day limit. Still mulling that over. I'm really happy with how adding picture links works. It's not perfect but when an image (.png/.bmp/.gif/.jpg) is added it's used as the background for that Shortlists cover. And it scales really nicely! 
			<br/><br/>
			I was going to use embed.ly for doing links but found their jQuery plugin to be slow and not as customizable as I would have liked. So I went the route of writing my own embed code. It works but running a regex against a link to check if it is A) a YouTube link B) to grab the videoID I need for embedding. There are a handful of ways YouTube formats their links so refining the regex was a pain but it seems to work well on all links I'm posted so far. Deciding how the videos would scale horizontally was a bit of a challenge. Initially I wanted the video player to be 16:9 but obviously that led to problems with how you choose the right height for the video. I settled for videos that were 100% width of their parent space (so they take up the entire 'cover' area) and set a hard height value at 550px. 550px is larger than most other cover images but it leads to a better viewing experience. The embedded YouTube player is smart enough to stick to those constraints but add bars either along the bottom or along the sides of a video depending on the aspect ratio of the video and the current width of the browser window.
			<br/><br/>
			Tomorrow I want to have a look at adding a property to the Link class so users can select a media type. Also I'll probably add in the handy moment.js library for handling date manipulations. And maybe deploy to Heroku :)
		</div>
	</div>

	<div class="log-entry">
		<div class="log-date">
			January 30th 2013
		</div>
		<div class="log-description">
			Major day of progress today. I finally got my User and Link class relationships in order. Users now have n many links which are displayed on their profile page. User profile pages now dynamically pulls up the avatar from when the user signed up. The front page now lists recently added links. Also began work on the UI of profile pages while taking into consideration of how things look on mobile. I'm likely going have to roll mobile custom CSS at some point but trying to avoid going down that rabbit hole at this point. More work on profile pages tomorrow and hopefully can begin to look at implementing embed.ly for links.
		</div>
	</div>

	<div class="log-entry">
		<div class="log-date">
			January 28th 2013
		</div>
		<div class="log-description">
			Refactored views to use layouts saving a lot of code redundancy. Also added footer and changelog to track project progress.
		</div>
	</div>

</div>